<!DOCTYPE HTML>
<html lang="{{ request.locale_name }}">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live</title>
    <link rel="stylesheet" href="{{ request.static_url('projetoredesmultimidia:static/css/bootstrap.min.css') }}"/>
    <style>
        #remote {
            width: 480px;
            height: 360px;
            background: #e3e3e3;
        }

        #local {
            width: 480px;
            height: 360px;
            background: #e3e3e3;
        }

    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <div class="videos">
                <video id="remote" autoplay></video>
                <video id="local" autoplay muted></video>
            </div>
            <button id="start-recording">Record Audio+Video</button>
            <button id="stop-recording" disabled>Stop</button>
        </div>
    </div>


    <footer>
        <span id="status" class="small"></span>
    </footer>
    <div id="rodape">
        © Anderson Marques Morais
    </div>
    <script type="text/javascript" src="{{ request.static_url('projetoredesmultimidia:static/js/jquery.js') }}"></script>
    <script type="text/javascript" src="{{ request.static_url('projetoredesmultimidia:static/js/bootstrap.min.js') }}"></script>
    <script type="text/javascript" src="https://cdn.webrtc-experiment.com/RecordRTC.js"></script>
    <script type="text/javascript" src="{{ request.static_url('projetoredesmultimidia:static/js/adapter.js') }}"></script>
    <script type="text/javascript">
        $(document).ready(function(ev){
            $("#start").on("click", function(e){ startRecording();});
            var wsurl = location.href.replace('http', 'ws').replace('live', 'ws');
            websock = new WebSocket(wsurl);
            var iplocal;
            console.log(location.href);
            /* Faço o replace dos campos http por ws e live por ws pôs preciso do uuid gerado pelo servidor para servir
            *como identificador da room gerada. por exemplo  a url usada é http://127.0.0.1:6543/live/123edssas o
            * web service vai ser criado na seguinte url ws://127.0.0.1:6543/ws/123edssas assim o identificador 123edssas
            * vai ser usado por mim para identificar a room criador \o/
            * */
            console.log(location.href.replace('http', 'ws').replace('live', 'ws'));
            videoElement = document.getElementById('local');
            remoteVideo = document.getElementById('remote');

            var audioVideoRecorder;

            function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
                navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
            }

            var startRecording = document.getElementById('start-recording');
            var stopRecording = document.getElementById('stop-recording');

            startRecording.onclick = function() {
                startRecording.disabled = true;
                stopRecording.disabled = false;
                captureUserMedia00(function(stream) {
                    audioVideoRecorder = new MRecordRTC(stream, {
                        //type: 'video'
                        //imeType: 'video/mp4', // or video/mp4 or audio/ogg
                        //audioBitsPerSecond: 128000,
                        //videoBitsPerSecond: 128000,
                        //bitsPerSecond: 128000
                        audio: true,
                        video: true
                    });
                    audioVideoRecorder.startRecording();
                    var u = URL.createObjectURL(stream);
                    console.log(u);
                    u.replace("^([0-9]{2}\.|1[0-9]{2}\.|2[0-5]{2}\.){3}([0-9]{2}|1[0-9]{2}|2[0-5]{2})$", iplocal);
                    console.log(u);
                    //websock.send(JSON.stringify({number:1, video: u}));
                });
            };
            var peerConnection;
            stopRecording.onclick = function() {
                stopRecording.disabled = true;
                startRecording.disabled = false;
                audioVideoRecorder.stopRecording(function(url) {
                    videoElement.src = url;
                    videoElement.muted = false;
                    videoElement.controls = true;
                    videoElement.play();
                    videoElement.onended = function () {

                        console.log("onended");
                        videoElement.pause();
                        // dirty workaround for: "firefox seems unable to playback"
                        console.log(audioVideoRecorder.getBlob().video);
                        console.log(url);
                        //websock.send(JSON.stringify({number:1, video: url}));

                        //videoElement.src = URL.createObjectURL(audioVideoRecorder.getBlob().videoBlob());
                    };
                });
            };

            function captureUserMedia00(callback) {
                captureUserMedia({
                    audio: true,
                    video: true
                }, function (stream) {
                    //start(true);

                    console.log(stream);
                    videoElement.src = URL.createObjectURL(stream);
                    videoElement.muted = true;
                    videoElement.controls = true;
                    videoElement.play();
                    //callback(stream);
                }, function (error) {
                    alert(JSON.stringify(error));
                });
            }

            var initiator;

            function initiatorCtrl(event) {
                console.log(event.data);
                if (event.data == "fullhouse") {
                    alert("full house");
                }
                if (event.data == "initiator") {
                    initiator = false;
                    init();
                }
                if (event.data == "not initiator") {
                    initiator = true;
                    init();
                }
            }

            websock.onmessage = initiatorCtrl;

            websock.onopen = function (event){
                    console.log("Open");
                    //websock.send(JSON.stringify({'msg': "Hello Socket :D"}));
            }
            init();

            function init() {
                var constraints = {
                    audio: true,
                    video: true
                };
                navigator.getUserMedia(constraints, connect, function () {
                    
                });
                /*captureUserMedia({
                    audio: true,
                    video: true
                }, function(stream) {
                    connect(stream)

                   console.log(stream);
                    videoElement.src = URL.createObjectURL(stream);
                    videoElement.muted = true;
                    videoElement.controls = true;
                    videoElement.play();
                    //callback(stream);
                }, function(error) {
                    alert(JSON.stringify(error));
                });*/
            }

            var pc;
            function connect(stream) {
                pc = new RTCPeerConnection(null);
                videoElement.src = window.URL.createObjectURL(stream);
                var u = URL.createObjectURL(stream);
                console.log(u.toString());
                console.log(iplocal);
                var l = u.toString();
                //l.replace("^([0-9]{2}\.|1[0-9]{2}\.|2[0-5]{2}\.){3}([0-9]{2}|1[0-9]{2}|2[0-5]{2})$", iplocal);
                var r = l.split("/");
                console.log(r);
                l = r[0] + "//" + iplocal + ":6543/" + r[3];
                console.log(l);
                console.log(stream);
                //websock.send(JSON.stringify({number:1, video: l, streamV: stream}));
                /*pc.onaddstream = function(event) {
                    $('#remote').attachStream(event.stream);
                    logStreaming(true);
                };
                pc.onicecandidate = function(event) {
                    console.log("onice");
                    if (event.candidate) {
                        websock.send(JSON.stringify(event.candidate));
                    }
                };
            var bufferCont = 1;
            websock.onmessage = function (event) {
                console.log("Onmenssage");
                console.log(event);
                console.log(JSON.parse(event.data));
                var resp = JSON.parse(event.data);
                console.log(resp);
                if(resp.candidate){
                    console.log("Server Candidate");
                    pc.addIceCandidate(new RTCIceCandidate(resp));
                }
                if (resp.number == bufferCont) {
                    try{
                        remoteVideo.src = URL.createObjectURL(resp.streamV);
                        remoteVideo.muted = false;
                        remoteVideo.controls = true;
                        remoteVideo.play();
                        bufferCont = 2;
                    }catch(err){
                        console.log(err.message);
                        bufferCont = 1;
                    }
                }
            };
            */
                /*websock.onmessage = function (event) {
                    console.log("onmessage2");
                    var signal = JSON.parse(event.data);
                    console.log("here");
                    if (signal.sdp) {
                        console.log("sdp");
                        if (initiator) {
                            console.log("recvans");
                            receiveAnswer(signal);
                        } else {
                            console.log("offer");
                            receiveOffer(signal);
                        }
                    } else if (signal.candidate) {
                        console.log("icecandidate");
                        pc.addIceCandidate(new RTCIceCandidate(signal));
                    }
                };*/

                //if (initiator) {
                //    console.log("Creater offer");
                //    createOffer();
                //} else {
                 //   console.log('waiting for offer...');
                //}
                //logStreaming(false);
            }

            /*
            function createOffer() {
                console.log('creating offer...');
                pc.createOffer(function(offer) {
                    console.log('created offer...');
                    console.log(offer);
                    pc.setLocalDescription(offer, function() {
                        console.log('sending to remote...');
                        websock.send(JSON.stringify(offer));
                    }, fail);
                }, fail);
            }


            function receiveOffer(offer) {
                console.log('received offer...');
                pc.setRemoteDescription(new RTCSessionDescription(offer), function() {
                    console.log('creating answer...');
                    pc.createAnswer(function(answer) {
                        console.log('created answer...');
                        pc.setLocalDescription(answer, function() {
                            console.log('sent answer');
                            websock.send(JSON.stringify(answer));
                        }, fail);
                    }, fail);
                }, fail);
            }


            function receiveAnswer(answer) {
                console.log('received answer');
                //pc.setRemoteDescription(new RTCSessionDescription(answer));
            }



            function fail() {
                console.log("erro");
            }


            jQuery.fn.attachStream = function(stream) {
                this.each(function() {
                    this.src = URL.createObjectURL(stream);
                    this.play();
                });
            };
            */
            //get the IP addresses associated with an account
            function getIPs(callback){
                console.log("getIPS");
                var ip_dups = {};

                //compatibility for firefox and chrome
                var RTCPeerConnection = window.RTCPeerConnection
                        || window.mozRTCPeerConnection
                        || window.webkitRTCPeerConnection;
                var useWebKit = !!window.webkitRTCPeerConnection;

                //bypass naive webrtc blocking using an iframe
                if(!RTCPeerConnection){
                    //NOTE: you need to have an iframe in the page right above the script tag
                    //
                    //<iframe id="iframe" sandbox="allow-same-origin" style="display: none"></iframe>
                    //<script>...getIPs called in here...
                    //
                    var win = iframe.contentWindow;
                    RTCPeerConnection = win.RTCPeerConnection
                            || win.mozRTCPeerConnection
                            || win.webkitRTCPeerConnection;
                    useWebKit = !!win.webkitRTCPeerConnection;
                }

                //minimal requirements for data connection
                var mediaConstraints = {
                    optional: [{RtpDataChannels: true}]
                };

                var servers = {iceServers: [{urls: "stun:stun.services.mozilla.com"}]};

                //construct a new RTCPeerConnection
                var pc = new RTCPeerConnection(null);

                function handleCandidate(candidate){
                    console.log("handler candiadte");
                    //match just the IP address
                    var ip_regex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/
                    var ip_addr = ip_regex.exec(candidate)[1];

                    //remove duplicates
                    if(ip_dups[ip_addr] === undefined)
                        callback(ip_addr);

                    ip_dups[ip_addr] = true;
                }

                //listen for candidate events
                pc.onicecandidate = function(ice){
                    console.log("icecandidate");
                    //skip non-candidate events
                    if(ice.candidate){
                        handleCandidate(ice.candidate.candidate);
                        websock.send(JSON.stringify(ice.candidate));
                    }


                };

                //create a bogus data channel
                pc.createDataChannel("");

                //create an offer sdp
                pc.createOffer(function(result){
                    console.log("createOffer");
                    //trigger the stun server request
                    pc.setLocalDescription(result, function(){}, function(){});

                }, function(){});

                //wait for a while to let everything done
                setTimeout(function(){
                    console.log("setTimeout");
                    //read candidate info from local description
                    var lines = pc.localDescription.sdp.split('\n');

                    lines.forEach(function(line){
                        if(line.indexOf('a=candidate:') === 0)
                            handleCandidate(line);
                    });
                }, 1000);

                websock.onmessage = function (event) {
                    console.log("onmessage2");
                    var signal = JSON.parse(event.data);
                    console.log("here");
                    if (signal.sdp) {
                        console.log("sdp");
                        if (initiator) {
                            console.log("recvans");
                            receiveAnswer(signal);
                        } else {
                            console.log("offer");
                            receiveOffer(signal);
                        }
                    } else if (signal.candidate) {
                        console.log("icecandidate");
                        pc.addIceCandidate(new RTCIceCandidate(signal));
                    }
                };
            }

            //Test: Print the IP addresses into the console
            getIPs(function(ip){
                console.log(ip);
                if(iplocal === undefined){
                    console.log("Setando ip local");
                    iplocal = ip;
                }

            });

            /*init();
            function init(){

                var bufferCont = 1;
                websock.onmessage = function (event) {
                    console.log("Onmenssage");
                    console.log(event);
                    console.log($.parseJSON(event.data));
                    //remoteStream = stream;
                    var resp = $.parseJSON(event.data);
                    if (resp.number == bufferCont) {
                        try{
                            remoteVideo.src = resp.video;
                            remoteVideo.muted = false;
                            remoteVideo.controls = true;
                            remoteVideo.play();
                            bufferCont = 2;
                        }catch(err){
                            console.log(err.message);
                            bufferCont = 1;
                        }

                    }
                    //remoteVideo.onended = function() {
                    //    console.log("onended");
                    //    remoteVideo.pause();
                        // dirty workaround for: "firefox seems unable to playback"
                        //console.log(audioVideoRecorder.getBlob());
                        //console.log(url);

                        //videoElement.src = URL.createObjectURL(audioVideoRecorder.getBlob().videoBlob());
                    //};

                }

                websock.onclose = function (event){
                    console.log("Close");
                }

                websock.onerror = function (event){
                    console.log("Erro");
                }
            }
            */
            //localStream;


            /*var streamRecorder;

            var constraints = {
                    video: true,
                    audio: true,
                };

            if(navigator.getUserMedia) {
                navigator.getUserMedia(constraints, getUserMediaSuccess, getUserMediaError);
            } else {
                alert('Your browser does not support getUserMedia API');
            }

            function getUserMediaSuccess(stream) {
                console.log("getusermedia");
                localStream = stream;
                console.log(stream);
                localVideo.src = window.URL.createObjectURL(stream);
                //websock.send(stream);
                //console.log("aqui");
            }

            function getUserMediaError(error) {
                console.log(error);
            }

            function startRecording() {
                streamRecorder = localStream.record();
                setTimeout(stopRecording, 10000);
            }
            function stopRecording() {
                streamRecorder.getRecordedData(postVideoToServer);
            }

            function postVideoToServer(videoblob){
                console.log(postvideo);
            }
*/

        });
    </script>
</body>
</html>